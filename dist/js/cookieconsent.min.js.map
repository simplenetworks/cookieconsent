{"version":3,"sources":["cookieconsent.js"],"names":["init","window","root","current_modal_focusable","all_table_headers","all_blocks","onAccept","onChange","last_elem_before_modal","last_consent_modal_btn_focus","main_container","consent_modal","settings_container","settings_inner","_conf_params","_createConsentModal","consent_text","_config","current_lang","auto_language","autorun","cookie_name","cookie_expiration","cookie_domain","location","hostname","cookie_path","cookie_same_site","use_rfc_cookie","autoclear_cookies","revision","script_selector","_cookieconsent","saved_cookie_content","consent_modal_exists","cookie_consent_accepted","consent_modal_visible","settings_modal_visible","clicked_inside_modal","valid_revision","revision_enabled","data","is_bot","consent_modal_focusable","settings_modal_focusable","toggle_states","toggle_categories","toggle_readonly","html_dom","document","documentElement","_getValidatedLanguage","lang","all_languages","Object","prototype","hasOwnProperty","call","_getKeys","length","_getModalFocusableData","allowed_focusable_types","_getAllFocusableElements","modal","_array","focus_later","focus_first","attr","focusable_elems","querySelectorAll","join","len","i","getAttribute","e","revision_message","_inArray","arr","value","_log","print_msg","optional_param","error","console","log","undefined","_createNode","type","el","createElement","setAttribute","_resolveCurrentLang","languages","requested_language","_getBrowserLang","browser_lang","navigator","language","browserLanguage","toLowerCase","_guiManager","gui_options","only_consent_modal","consent_modal_options","settings_modal_options","_setLayout","allowed_layouts","allowed_positions","allowed_transitions","layout","position","transition","split","_addClass","allowedCategory","cookie_category","JSON","parse","_getCookie","run","conf_params","getElementById","userAgent","test","webdriver","page_scripts","page_scripts_order","_setConfig","never_accepted","id","style","zIndex","innerHTML","all_modals_container","children","innerText","textContent","description","replace","consent_modal_inner","consent_modal_inner_inner","consent_title","accept_type","consent_buttons","consent_accept_all_btn","consent_reject_all_btn","consent_settings_btn","consent_close_btn","overlay","consent_modal_close_btn","className","visibility","opacity","insertAdjacentHTML","_addEvent","hide","accept","showSettings","hideSettings","appendChild","settings_container_valign","settings","settings_container_inner","settings_title","settings_header","settings_close_btn","settings_close_btn_container","settings_blocks","evt","event","keyCode","n_blocks","block_section","block_table_container","block_desc","block_title_container","accordion_id","block_title_btn","block_switch_label","block_switch","block_switch_span","label_text_span","block_switch_span_on_icon","block_switch_span_off_icon","checked","push","disabled","accordion","btn","_hasClass","_removeClass","block_title","tr_tmp_fragment","createDocumentFragment","p","th1","obj","new_column_key","tr_tmp","thead","block_table","tbody_fragment","n","tr","g","td_tmp","tbody","settings_buttons","settings_save_btn","settings_accept_all_btn","reject_all_btn_text","reject_all_btn","body","_createCookieConsentHTML","css_path","callback","xhr","XMLHttpRequest","onreadystatechange","this","readyState","status","styleSheet","cssText","responseText","createTextNode","getElementsByTagName","open","send","_loadCSS","all_links","x","preventDefault","returnValue","_addCookieSettingsButtonListener","show","setTimeout","tabbedOutsideDiv","tabbedInsideModal","key","shiftKey","activeElement","focus","contains","target","rfc_prop_exists","_setCookie","stringify","_manageExistingScripts","delay","scripts","sequential_enabled","accepted_categories","_loadScripts","index","curr_script","curr_script_category","removeAttribute","src","fresh_script","destination","source","attributes","nodeName","nodeValue","onload","parentNode","replaceChild","_setCookieData","new_data","mode","set","same_type","get","prop","field","new_revision","prompt_consent","message","getConfig","loadScript","attrs","function_defined","querySelector","script","head","updateScripts","_categories","_exclusions","categories","exclusions","to_accept","slice","toggles","states","_getCurrentPreferences","filter","item","category_toggles","changedSettings","must_reload","count","all_cookies_array","domains","non_www_domain","substr","jk","curr_block","curr_cookie_table","ckey","clen","hk","curr_row","found_cookies","curr_cookie_name","is_regex","curr_cookie_domain","curr_cookie_path","match","found_index","_eraseCookies","level","rfc_cookie","reload","_saveCookiePreferences","eraseCookies","_cookies","_path","_domain","cookies","validCookie","name","encodeURIComponent","date","Date","setTime","getTime","cookieStr","toUTCString","indexOf","protocol","cookie","get_value","found","pop","decodeURIComponent","custom_path","path","j","elem","fn","_passive","passive","addEventListener","attachEvent","keys","classname","classList","add","remove","RegExp"],"mappings":"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","file":"cookieconsent.min.js","sourcesContent":["/*!\n * CookieConsent v2.7.0-rc3\n * https://www.github.com/orestbida/cookieconsent\n * Author Orest Bida\n * Released under the MIT License\n */\n(function() {\n    'use strict';\n    /**\n     * @param {HTMLElement} [root] - [optional] element where the cookieconsent will be appended\n     * @returns {Object} cookieconsent object with API\n     */\n    var CookieConsent = function(root) {\n        /**\n         * CHANGE THIS FLAG FALSE TO DISABLE console.log()\n         */\n        var ENABLE_LOGS = true;\n        var _config = {\n            'current_lang': 'en',\n            'auto_language': null,\n            'autorun': true, // run as soon as loaded\n            'cookie_name': 'cc_cookie',\n            'cookie_expiration': 182, // default: 6 months (in days)\n            'cookie_domain': window.location.hostname, // default: current domain\n            'cookie_path': '/',\n            'cookie_same_site': 'Lax',\n            'use_rfc_cookie': false,\n            'autoclear_cookies': true,\n            'revision': 0,\n            'script_selector': 'data-cookiecategory'\n        };\n        /**\n         * Object which holds the main methods/API (.show, .run, ...)\n         */\n        var _cookieconsent = {};\n        /**\n         * Internal state variables\n         */\n        var saved_cookie_content = {};\n        var consent_modal_exists = false;\n        var cookie_consent_accepted = false;\n        var consent_modal_visible = false;\n        var settings_modal_visible = false;\n        var clicked_inside_modal = false;\n        var current_modal_focusable;\n        var all_table_headers, all_blocks, onAccept, onChange;\n        var valid_revision = true,\n            revision_enabled = false,\n            data = null;\n        // Don't run plugin (to avoid indexing its text content) if bot detected\n        var is_bot = false;\n        /**\n         * Save reference to the last focused element on the page\n         * (used later to restore focus when both modals are closed)\n         */\n        var last_elem_before_modal;\n        var last_consent_modal_btn_focus;\n        /**\n         * Both of the arrays below have the same structure:\n         * [0] => holds reference to the FIRST focusable element inside modal\n         * [1] => holds reference to the LAST focusable element inside modal\n         */\n        var consent_modal_focusable = [];\n        var settings_modal_focusable = [];\n        /**\n         * Keep track of enabled/disabled categories\n         * @type {boolean[]}\n         */\n        var toggle_states = [];\n        /**\n         * Stores all available categories\n         * @type {string[]}\n         */\n        var toggle_categories = [];\n        /**\n         * Keep track of readonly toggles\n         * @type {boolean[]}\n         */\n        var toggle_readonly = [];\n        /**\n         * Pointers to main dom elements (to avoid retrieving them later using document.getElementById)\n         */\n        var html_dom = document.documentElement;\n        var main_container;\n        var consent_modal;\n        var settings_container, settings_inner;\n        /**\n         * Update config settings\n         * @param {Object} conf_params\n         */\n        var _setConfig = function(conf_params) {\n            _log(\"CookieConsent [CONFIG]: received_config_settings \", conf_params);\n            if (typeof conf_params['cookie_expiration'] === \"number\")\n                _config.cookie_expiration = conf_params['cookie_expiration'];\n            if (typeof conf_params['autorun'] === \"boolean\")\n                _config.autorun = conf_params['autorun'];\n            if (typeof conf_params['cookie_domain'] === \"string\")\n                _config.cookie_domain = conf_params['cookie_domain'];\n            if (typeof conf_params['cookie_same_site'] === \"string\")\n                _config.cookie_same_site = conf_params['cookie_same_site'];\n            if (typeof conf_params['cookie_path'] === \"string\")\n                _config.cookie_path = conf_params['cookie_path'];\n            if (typeof conf_params['cookie_name'] === \"string\")\n                _config.cookie_name = conf_params['cookie_name'];\n            if (typeof conf_params['onAccept'] === \"function\")\n                onAccept = conf_params['onAccept'];\n            if (typeof conf_params['onChange'] === \"function\")\n                onChange = conf_params['onChange'];\n            if (typeof conf_params['revision'] === \"number\") {\n                conf_params['revision'] > -1 && (_config.revision = conf_params['revision']);\n                revision_enabled = true;\n            }\n            if (conf_params['autoclear_cookies'] === true)\n                _config.autoclear_cookies = true;\n            if (conf_params['use_rfc_cookie'] === true)\n                _config.use_rfc_cookie = true;\n            if (conf_params['hide_from_bots'] === true) {\n                is_bot = navigator &&\n                    ((navigator.userAgent && /bot|crawl|spider|slurp|teoma/i.test(navigator.userAgent)) || navigator.webdriver);\n            }\n            _config.page_scripts = conf_params['page_scripts'] === true;\n            _config.page_scripts_order = conf_params['page_scripts_order'] !== false;\n            if (conf_params['auto_language'] === 'browser' || conf_params['auto_language'] === true) {\n                _config.auto_language = 'browser';\n            } else if (conf_params['auto_language'] === 'document') {\n                _config.auto_language = 'document';\n            }\n            _config.current_lang = _resolveCurrentLang(conf_params.languages, conf_params['current_lang']);\n        }\n        /**\n         * Search for all occurrences in the current page and add an onClick listener :\n         * when clicked => open settings modal\n         */\n        var _addCookieSettingsButtonListener = function() {\n            var all_links = document.querySelectorAll('a[data-cc=\"c-settings\"], button[data-cc=\"c-settings\"]');\n            for (var x = 0; x < all_links.length; x++) {\n                all_links[x].setAttribute('aria-haspopup', 'dialog');\n                _addEvent(all_links[x], 'click', function(event) {\n                    _cookieconsent.showSettings(0);\n                    event.preventDefault ? event.preventDefault() : event.returnValue = false;\n                });\n            }\n        }\n        /**\n         * Get a valid language (at least 1 must be defined)\n         * @param {string} lang - desired language\n         * @param {Object} all_languages - all defined languages\n         * @returns {string} validated language\n         */\n        var _getValidatedLanguage = function(lang, all_languages) {\n            if (Object.prototype.hasOwnProperty.call(all_languages, lang)) {\n                return lang;\n            } else if (_getKeys(all_languages).length > 0) {\n                if (Object.prototype.hasOwnProperty.call(all_languages, _config.current_lang)) {\n                    return _config.current_lang;\n                } else {\n                    return _getKeys(all_languages)[0];\n                }\n            }\n        }\n        /**\n         * Save reference to first and last focusable elements inside each modal\n         * to prevent losing focus while navigating with TAB\n         */\n        var _getModalFocusableData = function() {\n            /**\n             * Note: any of the below focusable elements, which has the attribute tabindex=\"-1\" AND is either\n             * the first or last element of the modal, won't receive focus during \"open/close\" modal\n             */\n            var allowed_focusable_types = ['[href]', 'button', 'input', 'details', '[tabindex=\"0\"]'];\n            function _getAllFocusableElements(modal, _array) {\n                var focus_later = false,\n                    focus_first = false;\n                // ie might throw exception due to complex unsupported selector => a:not([tabindex=\"-1\"])\n                try {\n                    var focusable_elems = modal.querySelectorAll(allowed_focusable_types.join(':not([tabindex=\"-1\"]), '));\n                    var attr, len = focusable_elems.length,\n                        i = 0;\n                    while (i < len) {\n                        attr = focusable_elems[i].getAttribute('data-focus');\n                        if (!focus_first && attr === \"1\") {\n                            focus_first = focusable_elems[i];\n                        } else if (attr === \"0\") {\n                            focus_later = focusable_elems[i];\n                            if (!focus_first && focusable_elems[i + 1].getAttribute('data-focus') !== \"0\") {\n                                focus_first = focusable_elems[i + 1];\n                            }\n                        }\n                        i++;\n                    }\n                } catch (e) {\n                    return modal.querySelectorAll(allowed_focusable_types.join(', '));\n                }\n                /**\n                 * Save first and last elements (used to lock/trap focus inside modal)\n                 */\n                _array[0] = focusable_elems[0];\n                _array[1] = focusable_elems[focusable_elems.length - 1];\n                _array[2] = focus_later;\n                _array[3] = focus_first;\n            }\n            /**\n             * Get settings modal'S all focusable elements\n             * Save first and last elements (used to lock/trap focus inside modal)\n             */\n            _getAllFocusableElements(settings_inner, settings_modal_focusable);\n            /**\n             * If consent modal exists, do the same\n             */\n            if (consent_modal_exists) {\n                _getAllFocusableElements(consent_modal, consent_modal_focusable);\n            }\n        }\n        var _conf_params, _createConsentModal, revision_message = \"\",\n            consent_text;\n        /**\n         * Generate cookie consent html based on config settings\n         * @param {boolean} never_accepted - used to know whether to create both modals or not\n         * @param {Object} conf_params - user configuration parameters\n         */\n        var _createCookieConsentHTML = function(never_accepted, conf_params) {\n            // Create main container which holds both consent modal & settings modal\n            main_container = _createNode('div');\n            main_container.id = 'cc--main';\n            // Fix layout flash\n            main_container.style.position = \"fixed\";\n            main_container.style.zIndex = \"1000000\";\n            main_container.innerHTML = '<!--[if lt IE 9 ]><div id=\"cc_div\" class=\"cc_div ie\"></div><![endif]--><!--[if (gt IE 8)|!(IE)]><!--><div id=\"cc_div\" class=\"cc_div\"></div><!--<![endif]-->'\n            var all_modals_container = main_container.children[0];\n            // Get current language\n            var lang = _config.current_lang;\n            // Feature detection :=> avoid IE exception since .textContent is not always supported\n            var innerText = (typeof html_dom.textContent === 'string' ? 'textContent' : 'innerText');\n            _conf_params = conf_params;\n            _createConsentModal = (conf_params) => {\n                if (conf_params['force_consent'] === true) {\n                    _addClass(html_dom, 'force--consent');\n                }\n                var description = conf_params.languages[lang]['consent_modal']['description'];\n                if (revision_enabled) {\n                    if (!valid_revision) {\n                        description = description.replace(\"{{revision_message}}\", revision_message || conf_params.languages[lang]['consent_modal']['revision_message'] || \"\");\n                    } else {\n                        description = description.replace(\"{{revision_message}}\", \"\");\n                    }\n                }\n                if (consent_modal) {\n                    consent_text.innerHTML = description;\n                    return;\n                }\n                consent_modal = _createNode('div');\n                var consent_modal_inner = _createNode('div');\n                var consent_modal_inner_inner = _createNode('div');\n                var consent_title = _createNode('div');\n                consent_text = _createNode('div');\n                var consent_buttons = _createNode('div');\n                var consent_accept_all_btn = _createNode('button');\n                var consent_reject_all_btn = _createNode('button');\n                var consent_settings_btn = _createNode('button');\n                var consent_close_btn = _createNode('button');\n                var overlay = _createNode('div');\n                var consent_modal_close_btn = _createNode('button');\n                consent_modal.id = 'cm';\n                consent_modal_inner.id = 'c-inr';\n                consent_modal_inner_inner.id = 'c-inr-i';\n                consent_title.id = 'c-ttl';\n                consent_text.id = 'c-txt';\n                consent_buttons.id = \"c-bns\";\n                consent_accept_all_btn.id = 'c-p-bn';\n                consent_reject_all_btn.id = 'c-s-bn';\n                consent_settings_btn.id = 'c-settings-bn';\n                consent_close_btn.id = 'c-close-bn';\n                overlay.id = 'cm-ov';\n                consent_accept_all_btn.className = \"c-bn\";\n                consent_reject_all_btn.className = \"c-bn c_link\";\n                consent_settings_btn.className = 'c-bn c_link';\n                consent_close_btn.className = 'c-bn c_link';\n                consent_title.setAttribute('role', 'heading');\n                consent_title.setAttribute('aria-level', '2');\n                consent_modal.setAttribute('role', 'dialog');\n                consent_modal.setAttribute('aria-modal', 'true');\n                consent_modal.setAttribute('aria-hidden', 'false');\n                consent_modal.setAttribute('aria-labelledby', 'c-ttl');\n                consent_modal.setAttribute('aria-describedby', 'c-txt');\n                /**\n                 * Make modal by default hidden to prevent weird page jumps/flashes (shown only once css is loaded)\n                 */\n                consent_modal.style.visibility = overlay.style.visibility = \"hidden\";\n                overlay.style.opacity = 0;\n                // Use insertAdjacentHTML instead of innerHTML\n                consent_title.insertAdjacentHTML('beforeend', conf_params.languages[lang]['consent_modal']['title']);\n                consent_text.insertAdjacentHTML('beforeend', description);\n                consent_accept_all_btn[innerText] = conf_params.languages[lang]['consent_modal']['accept_all_btn']['text'];\n                consent_reject_all_btn[innerText] = conf_params.languages[lang]['consent_modal']['reject_all_btn']['text'];\n                consent_settings_btn[innerText] = conf_params.languages[lang]['consent_modal']['settings_btn']['text'];\n                consent_close_btn[innerText] = conf_params.languages[lang]['consent_modal']['close_btn']['text'];\n                var accept_type; // accept current selection\n                if (conf_params.languages[lang]['consent_modal']['accept_all_btn']['role'] === 'accept_all') {\n                    accept_type = 'all'; // accept all\n                }\n                _addEvent(consent_accept_all_btn, \"click\", function() {\n                    _cookieconsent.hide();\n                    _cookieconsent.accept(accept_type);\n                    _log(\"CookieConsent [ACCEPT]: cookie_consent was accepted!\");\n                });\n                _addEvent(consent_reject_all_btn, \"click\", function() {\n                    _cookieconsent.hide();\n                    _cookieconsent.accept([]); // accept necessary only\n                    _log(\"CookieConsent [REJECT]: Only necessaries cookies were accepted!\");\n                });\n                _addEvent(consent_settings_btn, 'click', function() {\n                    _cookieconsent.showSettings(0);\n                    _log(\"CookieConsent [SETTINGS]: Show Settings!\");\n                });\n                _addEvent(consent_close_btn, 'click', function() {\n                    _cookieconsent.hideSettings();\n                    _cookieconsent.hide();\n                    _cookieconsent.accept();\n                    _log(\"CookieConsent [DEFAULT]: Save default settings!\");\n                });\n                consent_modal_inner_inner.appendChild(consent_title);\n                consent_modal_inner_inner.appendChild(consent_text);\n                consent_buttons.appendChild(consent_accept_all_btn);\n                consent_buttons.appendChild(consent_reject_all_btn);\n                consent_buttons.appendChild(consent_settings_btn);\n                consent_buttons.appendChild(consent_close_btn);\n                consent_modal_inner.appendChild(consent_modal_inner_inner);\n                consent_modal_inner.appendChild(consent_buttons);\n                consent_modal.appendChild(consent_modal_inner);\n                // Append consent modal to main container\n                all_modals_container.appendChild(consent_modal);\n                all_modals_container.appendChild(overlay);\n                consent_modal_exists = true;\n                _addEvent(consent_modal_close_btn, 'click', () => {\n                    _cookieconsent.hideSettings(0);\n                });\n            }\n            // Create consent modal\n            if (!never_accepted) _createConsentModal(conf_params);\n            /**\n             * Create all consent_modal elements\n             */\n            settings_container = _createNode('div');\n            var settings_container_valign = _createNode('div');\n            var settings = _createNode('div');\n            var settings_container_inner = _createNode('div');\n            settings_inner = _createNode('div');\n            var settings_title = _createNode('div');\n            var settings_header = _createNode('div');\n            var settings_close_btn = _createNode('button');\n            var settings_close_btn_container = _createNode('div');\n            var settings_blocks = _createNode('div');\n            var overlay = _createNode('div');\n            /**\n             * Set ids\n             */\n            settings_container.id = 's-cnt';\n            settings_container_valign.id = \"c-vln\";\n            settings_container_inner.id = \"c-s-in\";\n            settings.id = \"cs\";\n            settings_title.id = 's-ttl';\n            settings_inner.id = 's-inr';\n            settings_header.id = \"s-hdr\";\n            settings_blocks.id = 's-bl';\n            settings_close_btn.id = 's-c-bn';\n            overlay.id = 'cs-ov';\n            settings_close_btn_container.id = 's-c-bnc';\n            settings_close_btn.className = 'c-bn';\n            settings_close_btn.setAttribute('aria-label', conf_params.languages[lang]['settings_modal']['close_btn_label'] || 'Close');\n            settings_container.setAttribute('role', 'dialog');\n            settings_container.setAttribute('aria-modal', 'true');\n            settings_container.setAttribute('aria-hidden', 'true');\n            settings_container.setAttribute('aria-labelledby', 's-ttl');\n            settings_title.setAttribute('role', 'heading');\n            settings_container.style.visibility = overlay.style.visibility = \"hidden\";\n            overlay.style.opacity = 0;\n            settings_close_btn_container.appendChild(settings_close_btn);\n            // If 'esc' key is pressed inside settings_container div => hide settings\n            _addEvent(settings_container_valign, 'keydown', function(evt) {\n                evt = evt || window.event;\n                if (evt.keyCode === 27) {\n                    _cookieconsent.hideSettings(0);\n                }\n            }, true);\n            _addEvent(settings_close_btn, 'click', function() {\n                _cookieconsent.hideSettings(0);\n            });\n            all_blocks = conf_params.languages[_config.current_lang]['settings_modal']['blocks'];\n            all_table_headers = conf_params.languages[_config.current_lang]['settings_modal']['cookie_table_headers'];\n            var n_blocks = all_blocks.length;\n            // Set settings modal title\n            settings_title.insertAdjacentHTML('beforeend', conf_params.languages[_config.current_lang]['settings_modal']['title']);\n            // Create settings modal content (blocks)\n            for (var i = 0; i < n_blocks; ++i) {\n                // Create title\n                var block_section = _createNode('div');\n                var block_table_container = _createNode('div');\n                var block_desc = _createNode('div');\n                var block_title_container = _createNode('div');\n                block_section.className = 'c-bl';\n                block_table_container.className = 'desc';\n                block_desc.className = 'p';\n                block_title_container.className = 'title';\n                // Set title and description for each block\n                block_desc.insertAdjacentHTML('beforeend', all_blocks[i]['description']);\n                // Create toggle if specified (opt in/out)\n                if (typeof all_blocks[i]['toggle'] !== 'undefined') {\n                    var accordion_id = \"c-ac-\" + i;\n                    // Create button (to collapse/expand block description)\n                    var block_title_btn = _createNode('button');\n                    var block_switch_label = _createNode('label');\n                    var block_switch = _createNode('input');\n                    var block_switch_span = _createNode('span');\n                    var label_text_span = _createNode('span');\n                    // These 2 spans will contain each 2 pseudo-elements to generate 'tick' and 'x' icons\n                    var block_switch_span_on_icon = _createNode('span');\n                    var block_switch_span_off_icon = _createNode('span');\n                    block_title_btn.className = 'b-tl';\n                    block_switch_label.className = 'b-tg';\n                    block_switch.className = 'c-tgl';\n                    block_switch_span_on_icon.className = 'on-i';\n                    block_switch_span_off_icon.className = 'off-i';\n                    block_switch_span.className = 'c-tg';\n                    label_text_span.className = \"t-lb\";\n                    block_title_btn.setAttribute('aria-expanded', 'false');\n                    block_title_btn.setAttribute('aria-controls', accordion_id);\n                    block_switch.type = 'checkbox';\n                    block_switch_span.setAttribute('aria-hidden', 'true');\n                    var cookie_category = all_blocks[i]['toggle'].value;\n                    block_switch.value = cookie_category;\n                    label_text_span[innerText] = all_blocks[i]['title'];\n                    block_title_btn.insertAdjacentHTML('beforeend', all_blocks[i]['title']);\n                    block_title_container.appendChild(block_title_btn);\n                    block_switch_span.appendChild(block_switch_span_on_icon);\n                    block_switch_span.appendChild(block_switch_span_off_icon);\n                    /**\n                     * If never accepted => generate toggles with the states defined in the config. object\n                     * Otherwise, retrieve values from saved cookie\n                     */\n                    if (never_accepted) {\n                        if (_inArray(saved_cookie_content['level'], cookie_category) > -1) {\n                            block_switch.checked = true;\n                            toggle_states.push(true);\n                        } else {\n                            toggle_states.push(false);\n                        }\n                    } else if (all_blocks[i]['toggle']['enabled']) {\n                        block_switch.checked = true;\n                        toggle_states.push(true);\n                    } else {\n                        toggle_states.push(false);\n                    }\n                    toggle_categories.push(cookie_category);\n                    /**\n                     * Set toggle as readonly if true (disable checkbox)\n                     */\n                    if (all_blocks[i]['toggle']['readonly']) {\n                        block_switch.disabled = true;\n                        _addClass(block_switch_span, 'c-ro');\n                        toggle_readonly.push(true);\n                    } else {\n                        toggle_readonly.push(false);\n                    }\n                    _addClass(block_table_container, 'b-acc');\n                    _addClass(block_title_container, 'b-bn');\n                    _addClass(block_section, 'b-ex');\n                    block_table_container.id = accordion_id;\n                    block_table_container.setAttribute('aria-hidden', 'true');\n                    block_switch_label.appendChild(block_switch);\n                    block_switch_label.appendChild(block_switch_span);\n                    block_switch_label.appendChild(label_text_span);\n                    block_title_container.appendChild(block_switch_label);\n                    /**\n                     * On button click handle the following :=> aria-expanded, aria-hidden and act class for current block\n                     */\n                    (function(accordion, block_section, btn) {\n                        _addEvent(block_title_btn, 'click', function() {\n                            if (!_hasClass(block_section, 'act')) {\n                                _addClass(block_section, 'act');\n                                btn.setAttribute('aria-expanded', 'true');\n                                accordion.setAttribute('aria-hidden', 'false');\n                            } else {\n                                _removeClass(block_section, 'act');\n                                btn.setAttribute('aria-expanded', 'false');\n                                accordion.setAttribute('aria-hidden', 'true');\n                            }\n                        }, false);\n                    })(block_table_container, block_section, block_title_btn);\n                } else {\n                    /**\n                     * If block is not a button (no toggle defined),\n                     * create a simple div instead\n                     */\n                    var block_title = _createNode('div');\n                    block_title.className = 'b-tl';\n                    block_title.setAttribute('role', 'heading');\n                    block_title.setAttribute('aria-level', '3');\n                    block_title.insertAdjacentHTML('beforeend', all_blocks[i]['title']);\n                    block_title_container.appendChild(block_title);\n                }\n                block_section.appendChild(block_title_container);\n                block_table_container.appendChild(block_desc);\n                var remove_cookie_tables = conf_params['remove_cookie_tables'] === true;\n                // if cookie table found, generate table for this block\n                if (!remove_cookie_tables && typeof all_blocks[i]['cookie_table'] !== 'undefined') {\n                    var tr_tmp_fragment = document.createDocumentFragment();\n                    /**\n                     * Use custom table headers\n                     */\n                    for (var p = 0; p < all_table_headers.length; ++p) {\n                        // create new header\n                        var th1 = _createNode('th');\n                        var obj = all_table_headers[p];\n                        th1.setAttribute('scope', 'col');\n                        // get custom header content\n                        if (obj) {\n                            var new_column_key = obj && _getKeys(obj)[0];\n                            th1[innerText] = all_table_headers[p][new_column_key];\n                            tr_tmp_fragment.appendChild(th1);\n                        }\n                    }\n                    var tr_tmp = _createNode('tr');\n                    tr_tmp.appendChild(tr_tmp_fragment);\n                    // create table header & append fragment\n                    var thead = _createNode('thead');\n                    thead.appendChild(tr_tmp);\n                    // append header to table\n                    var block_table = _createNode('table');\n                    block_table.appendChild(thead);\n                    var tbody_fragment = document.createDocumentFragment();\n                    // create table content\n                    for (var n = 0; n < all_blocks[i]['cookie_table'].length; n++) {\n                        var tr = _createNode('tr');\n                        for (var g = 0; g < all_table_headers.length; ++g) {\n                            // get custom header content\n                            obj = all_table_headers[g];\n                            if (obj) {\n                                new_column_key = _getKeys(obj)[0];\n                                var td_tmp = _createNode('td');\n                                // Allow html inside table cells\n                                td_tmp.insertAdjacentHTML('beforeend', all_blocks[i]['cookie_table'][n][new_column_key]);\n                                td_tmp.setAttribute('data-column', obj[new_column_key]);\n                                tr.appendChild(td_tmp);\n                            }\n                        }\n                        tbody_fragment.appendChild(tr);\n                    }\n                    // append tbody_fragment to tbody & append the latter into the table\n                    var tbody = _createNode('tbody');\n                    tbody.appendChild(tbody_fragment);\n                    block_table.appendChild(tbody);\n                    //block_section.appendChild(block_table);\n                    block_table_container.appendChild(block_table);\n                }\n                block_section.appendChild(block_table_container);\n                // append block inside settings dom\n                settings_blocks.appendChild(block_section);\n            }\n            // Create settings buttons\n            var settings_buttons = _createNode('div');\n            var settings_save_btn = _createNode('button');\n            var settings_accept_all_btn = _createNode('button');\n            settings_buttons.id = 's-bns';\n            settings_save_btn.id = 's-sv-bn';\n            settings_accept_all_btn.id = 's-all-bn';\n            settings_save_btn.className = 'c-bn';\n            settings_accept_all_btn.className = 'c-bn';\n            settings_save_btn.insertAdjacentHTML('beforeend', conf_params.languages[_config.current_lang]['settings_modal']['save_settings_btn']);\n            settings_accept_all_btn.insertAdjacentHTML('beforeend', conf_params.languages[_config.current_lang]['settings_modal']['accept_all_btn']);\n            settings_buttons.appendChild(settings_accept_all_btn);\n            var reject_all_btn_text = conf_params.languages[_config.current_lang]['settings_modal']['reject_all_btn'];\n            // Add third [optional] reject all button if provided\n            if (reject_all_btn_text) {\n                var reject_all_btn = _createNode('button');\n                reject_all_btn.id = 's-rall-bn';\n                reject_all_btn.className = 'c-bn';\n                reject_all_btn.insertAdjacentHTML('beforeend', reject_all_btn_text);\n                _addEvent(reject_all_btn, 'click', function() {\n                    _cookieconsent.hideSettings();\n                    _cookieconsent.hide();\n                    _cookieconsent.accept([]);\n                });\n                settings_inner.className = \"bns-t\";\n                settings_buttons.appendChild(reject_all_btn);\n            }\n            settings_buttons.appendChild(settings_save_btn);\n            // Add save preferences button onClick event\n            // Hide both settings modal and consent modal\n            _addEvent(settings_save_btn, 'click', function() {\n                _cookieconsent.hideSettings();\n                _cookieconsent.hide();\n                _cookieconsent.accept();\n            });\n            _addEvent(settings_accept_all_btn, 'click', function() {\n                _cookieconsent.hideSettings();\n                _cookieconsent.hide();\n                _cookieconsent.accept('all');\n            });\n            settings_header.appendChild(settings_title);\n            settings_header.appendChild(settings_close_btn_container);\n            settings_inner.appendChild(settings_header);\n            settings_inner.appendChild(settings_blocks);\n            settings_inner.appendChild(settings_buttons);\n            settings_container_inner.appendChild(settings_inner);\n            settings.appendChild(settings_container_inner);\n            settings_container_valign.appendChild(settings);\n            settings_container.appendChild(settings_container_valign);\n            all_modals_container.appendChild(settings_container);\n            all_modals_container.appendChild(overlay);\n            // Finally append everything to body (main_container holds both modals)\n            (root || document.body).appendChild(main_container);\n        }\n        /**\n         * Set toggles/checkboxes based on accepted categories and save cookie\n         * @param {string[]} accepted_categories - Array of categories to accept\n         */\n        var _saveCookiePreferences = function(accepted_categories) {\n            // Retrieve all toggle/checkbox values\n            var category_toggles = document.querySelectorAll('.c-tgl') || [];\n            var changedSettings = [],\n                must_reload = false;\n            // If there are opt in/out toggles ...\n            if (category_toggles.length > 0) {\n                for (var i = 0; i < category_toggles.length; i++) {\n                    if (_inArray(accepted_categories, toggle_categories[i]) !== -1) {\n                        category_toggles[i].checked = true;\n                        if (!toggle_states[i]) {\n                            changedSettings.push(toggle_categories[i]);\n                            toggle_states[i] = true;\n                        }\n                    } else {\n                        category_toggles[i].checked = false;\n                        if (toggle_states[i]) {\n                            changedSettings.push(toggle_categories[i]);\n                            toggle_states[i] = false;\n                        }\n                    }\n                }\n                /**\n                 * If autoclear_cookies==true -> delete all cookies which are unused (based on selected preferences)\n                 */\n                if (_config.autoclear_cookies && cookie_consent_accepted && changedSettings.length > 0) {\n                    // Get number of blocks\n                    var len = all_blocks.length;\n                    var count = -1;\n                    // Retrieve all cookies\n                    var all_cookies_array = _getCookie('', 'all');\n                    // delete cookies on 'www.domain.com' and '.www.domain.com' (can also be without www)\n                    var domains = [_config.cookie_domain, '.' + _config.cookie_domain];\n                    // if domain has www, delete cookies also for 'domain.com' and '.domain.com'\n                    if (_config.cookie_domain.slice(0, 4) === 'www.') {\n                        var non_www_domain = _config.cookie_domain.substr(4); // remove first 4 chars (www.)\n                        domains.push(non_www_domain);\n                        domains.push('.' + non_www_domain);\n                    }\n                    // For each block\n                    for (var jk = 0; jk < len; jk++) {\n                        // Save current block (local scope & less accesses -> ~faster value retrieval)\n                        var curr_block = all_blocks[jk];\n                        // If current block has a toggle for opt in/out\n                        if (Object.prototype.hasOwnProperty.call(curr_block, \"toggle\")) {\n                            // if current block has a cookie table, an off toggle,\n                            // and its preferences were just changed => delete cookies\n                            if (\n                                !toggle_states[++count] &&\n                                Object.prototype.hasOwnProperty.call(curr_block, \"cookie_table\") &&\n                                _inArray(changedSettings, curr_block['toggle']['value']) > -1\n                            ) {\n                                var curr_cookie_table = curr_block['cookie_table'];\n                                // Get first property name\n                                var ckey = _getKeys(all_table_headers[0])[0];\n                                // Get number of cookies defined in cookie_table\n                                var clen = curr_cookie_table.length;\n                                // set \"must_reload\" to true if reload=on_disable\n                                if (curr_block['toggle']['reload'] === 'on_disable') must_reload = true;\n                                // for each row defined in the cookie table\n                                for (var hk = 0; hk < clen; hk++) {\n                                    // Get current row of table (corresponds to all cookie params)\n                                    var curr_row = curr_cookie_table[hk],\n                                        found_cookies = [];\n                                    var curr_cookie_name = curr_row[ckey];\n                                    var is_regex = curr_row['is_regex'] || false;\n                                    var curr_cookie_domain = curr_row['domain'] || null;\n                                    var curr_cookie_path = curr_row['path'] || false;\n                                    // set domain to the specified domain\n                                    curr_cookie_domain && (domains = [curr_cookie_domain, '.' + curr_cookie_domain]);\n                                    // If regex provided => filter cookie array\n                                    if (is_regex) {\n                                        for (var n = 0; n < all_cookies_array.length; n++) {\n                                            if (all_cookies_array[n].match(curr_cookie_name)) {\n                                                found_cookies.push(all_cookies_array[n]);\n                                            }\n                                        }\n                                    } else {\n                                        var found_index = _inArray(all_cookies_array, curr_cookie_name);\n                                        if (found_index > -1) found_cookies.push(all_cookies_array[found_index]);\n                                    }\n                                    _log(\"CookieConsent [AUTOCLEAR]: search cookie: '\" + curr_cookie_name + \"', found:\", found_cookies);\n                                    // If cookie exists -> delete it\n                                    if (found_cookies.length > 0) {\n                                        _eraseCookies(found_cookies, curr_cookie_path, domains);\n                                        curr_block['toggle']['reload'] === 'on_clear' && (must_reload = true);\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n            saved_cookie_content = {\n                \"level\": accepted_categories,\n                \"revision\": _config.revision,\n                \"data\": data,\n                \"rfc_cookie\": _config.use_rfc_cookie\n            }\n            // save cookie with preferences 'level' (only if never accepted or settings were updated)\n            if (!cookie_consent_accepted || changedSettings.length > 0 || !valid_revision) {\n                valid_revision = true;\n                _setCookie(_config.cookie_name, JSON.stringify(saved_cookie_content));\n                _manageExistingScripts();\n            }\n            if (typeof onAccept === \"function\" && !cookie_consent_accepted) {\n                cookie_consent_accepted = true;\n                return onAccept(saved_cookie_content);\n            }\n            // fire onChange only if settings were changed\n            if (typeof onChange === \"function\" && changedSettings.length > 0) {\n                onChange(saved_cookie_content, changedSettings);\n            }\n            /**\n             * reload page if needed\n             */\n            if (must_reload) {\n                window.location.reload();\n            }\n        }\n        /**\n         * Function to run after css load\n         * @callback cssLoaded\n         */\n        /**\n         * Load style via ajax in background (and then show modal)\n         * @param {string} css_path\n         * @param {cssLoaded} callback\n         */\n        var _loadCSS = function(css_path, callback) {\n            // Enable if given path is string and non empty\n            var enable = typeof css_path === 'string' && css_path !== \"\";\n            if (enable && !document.getElementById('cc--style')) {\n                // Create style tag\n                var style = _createNode('style');\n                // ad an id so that in SPA apps (react-like) the style doesn't get loaded multiple times when plugin is called\n                style.id = 'cc--style';\n                var xhr = new XMLHttpRequest();\n                xhr.onreadystatechange = function() {\n                    if (this.readyState === 4 && this.status === 200) {\n                        // Necessary for <IE9\n                        style.setAttribute('type', 'text/css');\n                        if (style.styleSheet) { // if <IE9\n                            style.styleSheet.cssText = this.responseText;\n                        } else { // all other browsers\n                            style.appendChild(document.createTextNode(this.responseText));\n                        }\n                        // Append css text content\n                        document.getElementsByTagName('head')[0].appendChild(style);\n                        _log(\"CookieConsent [AUTOLOAD_CSS]: loaded style = '\" + css_path + \"'\");\n                        callback();\n                    }\n                };\n                xhr.open(\"GET\", css_path);\n                xhr.send();\n            } else {\n                callback();\n            }\n        }\n        /**\n         * Returns index of found element inside array, otherwise -1\n         * @param {Array} arr\n         * @param {Object} value\n         * @returns {number}\n         */\n        var _inArray = function(arr, value) {\n            var len = arr.length;\n            for (var i = 0; i < len; i++) {\n                if (arr[i] === value)\n                    return i;\n            }\n            return -1;\n        }\n        /**\n         * Helper function which prints info (console.log())\n         * @param {Object} print_msg\n         * @param {Object} [optional_param]\n         */\n        var _log = function(print_msg, optional_param, error) {\n            ENABLE_LOGS && (!error ? console.log(print_msg, optional_param !== undefined ? optional_param : ' ') : console.error(print_msg, optional_param || \"\"));\n        }\n        /**\n         * Helper function which creates an HTMLElement object based on 'type' and returns it.\n         * @param {string} type\n         * @returns {HTMLElement}\n         */\n        var _createNode = function(type) {\n            var el = document.createElement(type);\n            if (type === 'button') {\n                el.setAttribute('type', type);\n            }\n            return el;\n        }\n        /**\n         * Resolve which language should be used.\n         *\n         * @param {Object} languages Object with language translations\n         * @param {string} [requested_language] Language specified by given configuration parameters\n         * @returns {string}\n         */\n        var _resolveCurrentLang = function(languages, requested_language) {\n            _log(\"CookieConsent [LANG]: auto_language strategy is '\" + _config.auto_language + \"'\");\n            if (_config.auto_language === 'browser') {\n                return _getValidatedLanguage(_getBrowserLang(), languages);\n            } else if (_config.auto_language === 'document') {\n                return _getValidatedLanguage(document.documentElement.lang, languages);\n            } else {\n                if (typeof requested_language === 'string') {\n                    return _config.current_lang = _getValidatedLanguage(requested_language, languages);\n                }\n            }\n            _log(\"CookieConsent [LANG]: setting current_lang = '\" + _config.current_lang + \"'\");\n            return _config.current_lang; // otherwise return default\n        }\n        /**\n         * Get current client's browser language\n         * @returns {string}\n         */\n        var _getBrowserLang = function() {\n            var browser_lang = navigator.language || navigator.browserLanguage;\n            browser_lang.length > 2 && (browser_lang = browser_lang[0] + browser_lang[1]);\n            _log(\"CookieConsent [LANG]: detected_browser_lang = '\" + browser_lang + \"'\");\n            return browser_lang.toLowerCase()\n        }\n        /**\n         * Trap focus inside modal and focus the first\n         * focusable element of current active modal\n         */\n        var _handleFocusTrap = function() {\n            var tabbedOutsideDiv = false;\n            var tabbedInsideModal = false;\n            _addEvent(document, 'keydown', function(e) {\n                e = e || window.event;\n                // If is tab key => ok\n                if (e.key !== 'Tab') return;\n                // If there is any modal to focus\n                if (current_modal_focusable) {\n                    // If reached natural end of the tab sequence => restart\n                    if (e.shiftKey) {\n                        if (document.activeElement === current_modal_focusable[0]) {\n                            current_modal_focusable[1].focus();\n                            e.preventDefault();\n                        }\n                    } else {\n                        if (document.activeElement === current_modal_focusable[1]) {\n                            current_modal_focusable[0].focus();\n                            e.preventDefault();\n                        }\n                    }\n                    // If have not yet used tab (or shift+tab) and modal is open ...\n                    // Focus the first focusable element\n                    if (!tabbedInsideModal && !clicked_inside_modal) {\n                        tabbedInsideModal = true;\n                        !tabbedOutsideDiv && e.preventDefault();\n                        if (e.shiftKey) {\n                            if (current_modal_focusable[3]) {\n                                if (!current_modal_focusable[2]) {\n                                    current_modal_focusable[0].focus();\n                                } else {\n                                    current_modal_focusable[2].focus();\n                                }\n                            } else {\n                                current_modal_focusable[1].focus();\n                            }\n                        } else {\n                            if (current_modal_focusable[3]) {\n                                current_modal_focusable[3].focus();\n                            } else {\n                                current_modal_focusable[0].focus();\n                            }\n                        }\n                    }\n                }\n                !tabbedInsideModal && (tabbedOutsideDiv = true);\n            });\n            if (document.contains) {\n                _addEvent(main_container, 'click', function(e) {\n                    e = e || window.event;\n                    /**\n                     * If click is on the foreground overlay (and not inside settings_modal),\n                     * hide settings modal\n                     *\n                     * Notice: click on div is not supported in IE\n                     */\n                    if (settings_modal_visible) {\n                        if (!settings_inner.contains(e.target)) {\n                            _cookieconsent.hideSettings(0);\n                            clicked_inside_modal = false;\n                        } else {\n                            clicked_inside_modal = true;\n                        }\n                    } else if (consent_modal_visible) {\n                        if (consent_modal.contains(e.target)) {\n                            clicked_inside_modal = true;\n                        }\n                    }\n                }, true);\n            }\n        }\n        /**\n         * Manage each modal's layout\n         * @param {Object} gui_options\n         */\n        var _guiManager = function(gui_options, only_consent_modal) {\n            // If gui_options is not object => exit\n            if (typeof gui_options !== 'object') return;\n            var consent_modal_options = gui_options['consent_modal'];\n            var settings_modal_options = gui_options['settings_modal'];\n            /**\n             * Helper function which adds layout and\n             * position classes to given modal\n             *\n             * @param {HTMLElement} modal\n             * @param {string[]} allowed_layouts\n             * @param {string[]} allowed_positions\n             * @param {string} layout\n             * @param {string[]} position\n             */\n            function _setLayout(modal, allowed_layouts, allowed_positions, allowed_transitions, layout, position, transition) {\n                position = (position && position.split(\" \")) || [];\n                // Check if specified layout is valid\n                if (_inArray(allowed_layouts, layout) > -1) {\n                    // Add layout classes\n                    _addClass(modal, layout);\n                    // Add position class (if specified)\n                    if (!(layout === 'bar' && position[0] === 'middle') && _inArray(allowed_positions, position[0]) > -1) {\n                        for (var i = 0; i < position.length; i++) {\n                            _addClass(modal, position[i]);\n                        }\n                    }\n                }\n                // Add transition class\n                (_inArray(allowed_transitions, transition) > -1) && _addClass(modal, transition);\n            }\n            if (consent_modal_exists && consent_modal_options) {\n                _setLayout(\n                    consent_modal,\n                    ['box', 'bar', 'cloud'],\n                    ['top', 'middle', 'bottom'],\n                    ['zoom', 'slide'],\n                    consent_modal_options['layout'],\n                    consent_modal_options['position'],\n                    consent_modal_options['transition']\n                );\n            }\n            if (!only_consent_modal && settings_modal_options) {\n                _setLayout(\n                    settings_container,\n                    ['bar'],\n                    ['left', 'right'],\n                    ['zoom', 'slide'],\n                    settings_modal_options['layout'],\n                    settings_modal_options['position'],\n                    settings_modal_options['transition']\n                );\n            }\n        }\n        /**\n         * Returns true if cookie category is accepted by the user\n         * @param {string} cookie_category\n         * @returns {boolean}\n         */\n        _cookieconsent.allowedCategory = function(cookie_category) {\n            return _inArray(\n                JSON.parse(_getCookie(_config.cookie_name, 'one', true) || '{}')['level'] || [],\n                cookie_category\n            ) > -1;\n        }\n        /**\n         * Check if cookieconsent is already attached to dom\n         * If not, create one, configure it and attach it to the body\n         */\n        _cookieconsent.run = function(conf_params) {\n            if (!document.getElementById('cc_div')) {\n                // configure all parameters\n                _setConfig(conf_params);\n                // if is bot, don't run plugin\n                if (is_bot) return;\n                // Retrieve cookie value (if set)\n                saved_cookie_content = JSON.parse(_getCookie(_config.cookie_name, 'one', true) || \"{}\");\n                cookie_consent_accepted = saved_cookie_content['level'] !== undefined;\n                data = saved_cookie_content['data'] !== undefined ? saved_cookie_content['data'] : null;\n                // Compare current revision with the one retrieved from cookie\n                valid_revision = typeof conf_params['revision'] === \"number\" ?\n                    cookie_consent_accepted ?\n                    conf_params['revision'] > -1 ?\n                    saved_cookie_content['revision'] === _config.revision :\n                    true :\n                    true :\n                    true;\n                // If invalid revision or cookie is empty => create consent modal\n                consent_modal_exists = (!cookie_consent_accepted || !valid_revision);\n                // Generate cookie-settings dom (& consent modal)\n                _createCookieConsentHTML(!consent_modal_exists, conf_params);\n                _loadCSS(conf_params['theme_css'], function() {\n                    _getModalFocusableData();\n                    _guiManager(conf_params['gui_options']);\n                    _addCookieSettingsButtonListener();\n                    if (_config.autorun && consent_modal_exists) {\n                        _cookieconsent.show(conf_params['delay'] || 0);\n                    }\n                    // Add class to enable animations/transitions\n                    setTimeout(function() {\n                        _addClass(main_container, 'c--anim');\n                    }, 30);\n                    // Accessibility :=> if tab pressed => trap focus inside modal\n                    setTimeout(function() {\n                        _handleFocusTrap();\n                    }, 100);\n                });\n                if (cookie_consent_accepted && valid_revision) {\n                    var rfc_prop_exists = typeof saved_cookie_content['rfc_cookie'] === \"boolean\";\n                    /*\n                     * Convert cookie to rfc format (if `use_rfc_cookie` is enabled)\n                     */\n                    if (!rfc_prop_exists || (rfc_prop_exists && saved_cookie_content['rfc_cookie'] !== _config.use_rfc_cookie)) {\n                        saved_cookie_content['rfc_cookie'] = _config.use_rfc_cookie;\n                        _setCookie(_config.cookie_name, JSON.stringify(saved_cookie_content));\n                    }\n                    _manageExistingScripts();\n                    if (typeof conf_params['onAccept'] === \"function\") {\n                        conf_params['onAccept'](saved_cookie_content);\n                    }\n                }\n            } else {\n                _log(\"CookieConsent [NOTICE]: cookie consent already attached to body!\");\n            }\n        }\n        /**\n         * Show settings modal (with optional delay)\n         * @param {number} delay\n         */\n        _cookieconsent.showSettings = function(delay) {\n            setTimeout(function() {\n                _addClass(html_dom, \"show--settings\");\n                settings_container.setAttribute('aria-hidden', 'false');\n                settings_modal_visible = true;\n                /**\n                 * Set focus to the first focusable element inside settings modal\n                 */\n                setTimeout(function() {\n                    // If there is no consent-modal, keep track of the last focused elem.\n                    if (!consent_modal_visible) {\n                        last_elem_before_modal = document.activeElement;\n                    } else {\n                        last_consent_modal_btn_focus = document.activeElement;\n                    }\n                    if (settings_modal_focusable.length === 0) return;\n                    if (settings_modal_focusable[3]) {\n                        settings_modal_focusable[3].focus();\n                    } else {\n                        settings_modal_focusable[0].focus();\n                    }\n                    current_modal_focusable = settings_modal_focusable;\n                }, 200);\n                _log(\"CookieConsent [SETTINGS]: show settings_modal\");\n            }, delay > 0 ? delay : 0);\n        }\n        /**\n         * This function handles the loading/activation logic of the already\n         * existing scripts based on the current accepted cookie categories\n         */\n        var _manageExistingScripts = function() {\n            if (!_config.page_scripts) return;\n            // get all the scripts with \"cookie-category\" attribute\n            var scripts = document.querySelectorAll('script[' + _config.script_selector + ']');\n            var sequential_enabled = _config.page_scripts_order;\n            var accepted_categories = saved_cookie_content['level'] || [];\n            _log(\"CookieConsent [SCRIPT_MANAGER]: sequential loading:\", sequential_enabled);\n            /**\n             * Load scripts (sequentially), using a recursive function\n             * which loops through the scripts array\n             * @param {Element[]} scripts scripts to load\n             * @param {number} index current script to load\n             */\n            var _loadScripts = function(scripts, index) {\n                if (index < scripts.length) {\n                    var curr_script = scripts[index];\n                    var curr_script_category = curr_script.getAttribute(_config.script_selector);\n                    /**\n                     * If current script's category is on the array of categories\n                     * accepted by the user => load script\n                     */\n                    if (_inArray(accepted_categories, curr_script_category) > -1) {\n                        curr_script.type = 'text/javascript';\n                        curr_script.removeAttribute(_config.script_selector);\n                        // get current script data-src\n                        var src = curr_script.getAttribute('data-src');\n                        // create fresh script (with the same code)\n                        var fresh_script = _createNode('script');\n                        fresh_script.textContent = curr_script.innerHTML;\n                        // Copy attributes over to the new \"revived\" script\n                        (function(destination, source) {\n                            var attr, attributes = source.attributes;\n                            var len = attributes.length;\n                            for (var i = 0; i < len; i++) {\n                                attr = attributes[i];\n                                destination.setAttribute(attr.nodeName, attr.nodeValue);\n                            }\n                        })(fresh_script, curr_script);\n                        // set src (if data-src found)\n                        src ? (fresh_script.src = src) : (src = curr_script.src);\n                        // if script has \"src\" attribute\n                        // try loading it sequentially\n                        if (src) {\n                            if (sequential_enabled) {\n                                // load script sequentially => the next script will not be loaded\n                                // until the current's script onload event triggers\n                                if (fresh_script.readyState) { // only required for IE <9\n                                    fresh_script.onreadystatechange = function() {\n                                        if (fresh_script.readyState === \"loaded\" || fresh_script.readyState === \"complete\") {\n                                            fresh_script.onreadystatechange = null;\n                                            _loadScripts(scripts, ++index);\n                                        }\n                                    };\n                                } else { // others\n                                    fresh_script.onload = function() {\n                                        fresh_script.onload = null;\n                                        _loadScripts(scripts, ++index);\n                                    };\n                                }\n                            } else {\n                                // if sequential option is disabled\n                                // treat current script as inline (without onload event)\n                                src = false;\n                            }\n                        }\n                        // Replace current \"sleeping\" script with the new \"revived\" one\n                        curr_script.parentNode.replaceChild(fresh_script, curr_script);\n                        /**\n                         * If we managed to get here and scr is still set, it means that\n                         * the script is loading/loaded sequentially so don't go any further\n                         */\n                        if (src) return;\n                    }\n                    // Go to next script right away\n                    _loadScripts(scripts, ++index);\n                }\n            }\n            _loadScripts(scripts, 0);\n        }\n        /**\n         * Save custom data inside cookie\n         * @param {object|string} new_data\n         * @param {string} [mode]\n         * @returns {boolean}\n         */\n        var _setCookieData = function(new_data, mode) {\n            var set = false;\n            /**\n             * If mode is 'update':\n             * add/update only the specified props.\n             */\n            if (mode === 'update') {\n                data = _cookieconsent.get('data');\n                var same_type = typeof data === typeof new_data;\n                if (same_type && typeof data === \"object\") {\n                    !data && (data = {});\n                    for (var prop in new_data) {\n                        if (data[prop] !== new_data[prop]) {\n                            data[prop] = new_data[prop]\n                            set = true;\n                        }\n                    }\n                } else if ((same_type || !data) && data !== new_data) {\n                    data = new_data;\n                    set = true;\n                }\n            } else {\n                data = new_data;\n                set = true;\n            }\n            if (set) {\n                saved_cookie_content['data'] = data;\n                _setCookie(_config.cookie_name, JSON.stringify(saved_cookie_content));\n            }\n            return set;\n        }\n        /**\n         * Forcefully set a specific revision and show consent modal\n         * @param {number} new_revision\n         * @param {boolean} [prompt_consent]\n         * @returns {boolean}\n         */\n        var _setRevision = function(new_revision, prompt_consent, message) {\n            // If plugin has been initialized and new revision is valid\n            if (\n                main_container &&\n                typeof new_revision === \"number\" &&\n                saved_cookie_content['revision'] !== new_revision\n            ) {\n                revision_enabled = true;\n                revision_message = message;\n                valid_revision = false;\n                _config.revision = new_revision;\n                // Show consent modal ?\n                if (prompt_consent === true) {\n                    _createConsentModal(_conf_params);\n                    _guiManager(_conf_params['gui_options'], true);\n                    _getModalFocusableData();\n                    _cookieconsent.show();\n                } else {\n                    // If revision was modified, save cookie with the new revision\n                    _cookieconsent.accept();\n                }\n                return true;\n            }\n            return false;\n        }\n        /**\n         * Helper method to set a variety of fields\n         * @param {string} field\n         * @param {object} data\n         * @returns {boolean}\n         */\n        _cookieconsent.set = function(field, data) {\n            switch (field) {\n                case 'data':\n                    return _setCookieData(data['value'], data['mode']);\n                case 'revision':\n                    return _setRevision(data['value'], data['prompt_consent'], data['message']);\n                default:\n                    return false;\n            }\n        }\n        /**\n         * Retrieve data from existing cookie\n         * @param {string} field\n         * @param {string} [cookie_name]\n         * @returns {any}\n         */\n        _cookieconsent.get = function(field, cookie_name) {\n            var cookie = JSON.parse(_getCookie(cookie_name || _config.cookie_name, 'one', true) || \"{}\");\n            return cookie[field];\n        }\n        /**\n         * Read current configuration value\n         * @returns {any}\n         */\n        _cookieconsent.getConfig = function(field) {\n            return _config[field];\n        }\n        /**\n         * Function which will run after script load\n         * @callback scriptLoaded\n         */\n        /**\n         * Dynamically load script (append to head)\n         * @param {string} src\n         * @param {scriptLoaded} callback\n         * @param {string[]} attrs\n         */\n        _cookieconsent.loadScript = function(src, callback, attrs) {\n            var function_defined = typeof callback === 'function';\n            // Load script only if not already loaded\n            if (!document.querySelector('script[src=\"' + src + '\"]')) {\n                var script = _createNode('script');\n                // if an array is provided => add custom attributes\n                if (attrs && attrs.length > 0) {\n                    for (var i = 0; i < attrs.length; ++i) {\n                        attrs[i] && script.setAttribute(attrs[i]['name'], attrs[i]['value']);\n                    }\n                }\n                // if callback function defined => run callback onload\n                if (function_defined) {\n                    if (script.readyState) { // only required for IE <9\n                        script.onreadystatechange = function() {\n                            if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n                                script.onreadystatechange = null;\n                                callback();\n                            }\n                        };\n                    } else { //Others\n                        script.onload = callback;\n                    }\n                }\n                script.src = src;\n                /**\n                 * Append script to head\n                 */\n                (document.head ? document.head : document.getElementsByTagName('head')[0]).appendChild(script);\n            } else {\n                function_defined && callback();\n            }\n        }\n        /**\n         * Manage dynamically loaded scripts: https://github.com/orestbida/cookieconsent/issues/101\n         * If plugin has already run, call this method to enable\n         * the newly added scripts based on currently selected preferences\n         */\n        _cookieconsent.updateScripts = function() {\n            _manageExistingScripts();\n        }\n        /**\n         * Show cookie consent modal (with delay parameter)\n         * @param {number} delay\n         */\n        _cookieconsent.show = function(delay) {\n            if (consent_modal_exists) {\n                setTimeout(function() {\n                    _addClass(html_dom, \"show--consent\");\n                    /**\n                     * Update attributes/internal statuses\n                     */\n                    consent_modal.setAttribute('aria-hidden', 'false');\n                    consent_modal_visible = true;\n                    setTimeout(function() {\n                        last_elem_before_modal = document.activeElement;\n                        current_modal_focusable = consent_modal_focusable;\n                    }, 200);\n                    _log(\"CookieConsent [MODAL]: show consent_modal\");\n                }, delay > 0 ? delay : 0);\n            }\n        }\n        /**\n         * Hide consent modal\n         */\n        _cookieconsent.hide = function() {\n            if (consent_modal_exists) {\n                _removeClass(html_dom, \"show--consent\");\n                consent_modal.setAttribute('aria-hidden', 'true');\n                consent_modal_visible = false;\n                setTimeout(function() {\n                    //restore focus to the last page element which had focus before modal opening\n                    last_elem_before_modal.focus();\n                    current_modal_focusable = null;\n                }, 200);\n                _log(\"CookieConsent [MODAL]: hide\");\n            }\n        }\n        /**\n         * Hide settings modal\n         */\n        _cookieconsent.hideSettings = function() {\n            _removeClass(html_dom, \"show--settings\");\n            settings_modal_visible = false;\n            settings_container.setAttribute('aria-hidden', 'true');\n            setTimeout(function() {\n                /**\n                 * If consent modal is visible, focus him (instead of page document)\n                 */\n                if (consent_modal_visible) {\n                    last_consent_modal_btn_focus && last_consent_modal_btn_focus.focus();\n                    current_modal_focusable = consent_modal_focusable;\n                } else {\n                    /**\n                     * Restore focus to last page element which had focus before modal opening\n                     */\n                    last_elem_before_modal.focus();\n                    current_modal_focusable = null;\n                }\n                clicked_inside_modal = false;\n            }, 200);\n            _log(\"CookieConsent [SETTINGS]: hide settings_modal\");\n        }\n        /**\n         * Accept cookieconsent function API\n         * @param {string[]|string} _categories - Categories to accept\n         * @param {string[]} [_exclusions] - Excluded categories [optional]\n         */\n        _cookieconsent.accept = function(_categories, _exclusions) {\n            var categories = _categories || undefined;\n            var exclusions = _exclusions || [];\n            var to_accept = [];\n            /**\n             * Get all accepted categories\n             * @returns {string[]}\n             */\n            var _getCurrentPreferences = function() {\n                var toggles = document.querySelectorAll('.c-tgl') || [];\n                var states = [];\n                for (var i = 0; i < toggles.length; i++) {\n                    if (toggles[i].checked) {\n                        states.push(toggles[i].value);\n                    }\n                }\n                return states;\n            }\n            if (!categories) {\n                to_accept = _getCurrentPreferences();\n            } else {\n                if (\n                    typeof categories === \"object\" &&\n                    typeof categories.length === \"number\"\n                ) {\n                    for (var i = 0; i < categories.length; i++) {\n                        if (_inArray(toggle_categories, categories[i]) !== -1)\n                            to_accept.push(categories[i]);\n                    }\n                } else if (typeof categories === \"string\") {\n                    if (categories === 'all')\n                        to_accept = toggle_categories.slice();\n                    else {\n                        if (_inArray(toggle_categories, categories) !== -1)\n                            to_accept.push(categories);\n                    }\n                }\n            }\n            // Remove excluded categories\n            if (exclusions.length >= 1) {\n                for (i = 0; i < exclusions.length; i++) {\n                    to_accept = to_accept.filter(function(item) {\n                        return item !== exclusions[i]\n                    })\n                }\n            }\n            // Add back all the categories set as \"readonly/required\"\n            for (i = 0; i < toggle_categories.length; i++) {\n                if (\n                    toggle_readonly[i] === true &&\n                    _inArray(to_accept, toggle_categories[i]) === -1\n                ) {\n                    to_accept.push(toggle_categories[i]);\n                }\n            }\n            _saveCookiePreferences(to_accept);\n        }\n        /**\n         * API function to easily erase cookies\n         * @param {(string|string[])} _cookies\n         * @param {string} [_path] - optional\n         * @param {string} [_domain] - optional\n         */\n        _cookieconsent.eraseCookies = function(_cookies, _path, _domain) {\n            var cookies = [];\n            var domains = _domain ?\n                [_domain, \".\" + _domain] :\n                [_config.cookie_domain, \".\" + _config.cookie_domain];\n            if (typeof _cookies === \"object\" && _cookies.length > 0) {\n                for (var i = 0; i < _cookies.length; i++) {\n                    this.validCookie(_cookies[i]) && cookies.push(_cookies[i]);\n                }\n            } else {\n                this.validCookie(_cookies) && cookies.push(_cookies);\n            }\n            _eraseCookies(cookies, _path, domains);\n        }\n        /**\n         * Set cookie, by specifying name and value\n         * @param {string} name\n         * @param {string} value\n         */\n        var _setCookie = function(name, value) {\n            value = _config.use_rfc_cookie ? encodeURIComponent(value) : value;\n            var date = new Date();\n            date.setTime(date.getTime() + (1000 * (_config.cookie_expiration * 24 * 60 * 60)));\n            var expires = \"; expires=\" + date.toUTCString();\n            var cookieStr = name + \"=\" + (value || \"\") + expires + \"; Path=\" + _config.cookie_path + \";\";\n            cookieStr += \" SameSite=\" + _config.cookie_same_site + \";\";\n            // assures cookie works with localhost (=> don't specify domain if on localhost)\n            if (window.location.hostname.indexOf(\".\") > -1) {\n                cookieStr += \" Domain=\" + _config.cookie_domain + \";\";\n            }\n            if (window.location.protocol === \"https:\") {\n                cookieStr += \" Secure;\";\n            }\n            document.cookie = cookieStr;\n            _log(\"CookieConsent [SET_COOKIE]: cookie \" + name + \"='\" + value + \"' was set!\");\n        }\n        /**\n         * Get cookie value by name,\n         * returns the cookie value if found (or an array\n         * of cookies if filter provided), otherwise empty string: \"\"\n         * @param {string} name\n         * @param {string} filter - 'one' or 'all'\n         * @param {boolean} get_value - set to true to obtain its value\n         * @returns {string|string[]}\n         */\n        var _getCookie = function(name, filter, get_value) {\n            var found;\n            if (filter === 'one') {\n                found = document.cookie.match(\"(^|;)\\\\s*\" + name + \"\\\\s*=\\\\s*([^;]+)\");\n                found = found ? (get_value ? found.pop() : name) : \"\";\n                if (found && name === _config.cookie_name) {\n                    try {\n                        found = JSON.parse(found)\n                    } catch (e) {\n                        try {\n                            found = JSON.parse(decodeURIComponent(found))\n                        } catch (e) {\n                            // if I got here => cookie value is not a valid json string\n                            found = {};\n                        }\n                    }\n                    found = JSON.stringify(found);\n                }\n            } else if (filter === 'all') {\n                // array of names of all existing cookies\n                var cookies = document.cookie.split(/;\\s*/);\n                found = [];\n                for (var i = 0; i < cookies.length; i++) {\n                    found.push(cookies[i].split(\"=\")[0]);\n                }\n            }\n            return found;\n        }\n        /**\n         * Delete cookie by name & path\n         * @param {string[]} cookies\n         * @param {string} [custom_path] - optional\n         * @param {string[]} domains - example: ['domain.com', '.domain.com']\n         */\n        var _eraseCookies = function(cookies, custom_path, domains) {\n            var path = custom_path ? custom_path : '/';\n            var expires = 'Expires=Thu, 01 Jan 1970 00:00:01 GMT;';\n            for (var i = 0; i < cookies.length; i++) {\n                for (var j = 0; j < domains.length; j++) {\n                    document.cookie = cookies[i] + '=; path=' + path +\n                        (domains[j].indexOf('.') > -1 ? '; domain=' + domains[j] : \"\") + '; ' + expires;\n                }\n                _log(\"CookieConsent [AUTOCLEAR]: deleting cookie: '\" + cookies[i] + \"' path: '\" + path + \"' domain:\", domains);\n            }\n        }\n        /**\n         * Returns true if cookie was found and has valid value (not empty string)\n         * @param {string} cookie_name\n         * @returns {boolean}\n         */\n        _cookieconsent.validCookie = function(cookie_name) {\n            return _getCookie(cookie_name, 'one', true) !== \"\";\n        }\n        /**\n         * Function to run when event is fired\n         * @callback eventFired\n         */\n        /**\n         * Add event listener to dom object (cross browser function)\n         * @param {Element} elem\n         * @param {string} event\n         * @param {eventFired} fn\n         * @param {boolean} passive\n         */\n        var _addEvent = function(elem, event, fn, _passive) {\n            var passive = _passive === true;\n            if (elem.addEventListener) {\n                passive ? elem.addEventListener(event, fn, {\n                    passive: true\n                }) : elem.addEventListener(event, fn, false);\n            } else {\n                /**\n                 * For old browser, add 'on' before event:\n                 * 'click':=> 'onclick'\n                 */\n                elem.attachEvent(\"on\" + event, fn);\n            }\n        }\n        /**\n         * Get all prop. keys defined inside object\n         * @param {Object} obj\n         */\n        var _getKeys = function(obj) {\n            if (typeof obj === \"object\") {\n                var keys = [],\n                    i = 0;\n                for (keys[i++] in obj);\n                return keys;\n            }\n        }\n        /**\n         * Append class to the specified dom element\n         * @param {HTMLElement} elem\n         * @param {string} classname\n         */\n        var _addClass = function(elem, classname) {\n            if (elem.classList)\n                elem.classList.add(classname)\n            else {\n                if (!_hasClass(elem, classname))\n                    elem.className += ' ' + classname;\n            }\n        }\n        /**\n         * Remove specified class from dom element\n         * @param {HTMLElement} elem\n         * @param {string} classname\n         */\n        var _removeClass = function(el, className) {\n            el.classList ? el.classList.remove(className) : el.className = el.className.replace(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'), ' ');\n        }\n        /**\n         * Check if html element has class\n         * @param {HTMLElement} el\n         * @param {string} className\n         */\n        var _hasClass = function(el, className) {\n            if (el.classList) {\n                return el.classList.contains(className);\n            }\n            return !!el.className.match(new RegExp('(\\\\s|^)' + className + '(\\\\s|$)'));\n        }\n        return _cookieconsent;\n    };\n    var init = 'initCookieConsent';\n    /**\n     * Make CookieConsent object accessible globally\n     */\n    if (typeof window[init] !== 'function') {\n        window[init] = CookieConsent\n    }\n})();\n"]}